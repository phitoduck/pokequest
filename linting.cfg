#
# flake8 configuration -- checks existing docstrings for
#     completeness and proper formatting via the flake-darglint
#     plugin. (See https://github.com/terrencepreilly/darglint)
#

[flake8]
# only use flake8 for docstring checking (flake-darglint)
select=
    # The docstring was not parsed correctly due to a syntax error.
    DAR001,
    # An argument/exception lacks a description
    DAR002,
    # A line is under-indented or over-indented.
    DAR003,
    # The docstring contains an extra newline where it shouldn't.
    DAR004,
    # The docstring is missing a parameter in the definition.
    DAR101,
    # The docstring contains a parameter not in function.
    DAR102,
    # The docstring parameter type doesn't match function.
    DAR103,
    # (disabled) The docstring parameter has no type specified
    DAR104,
    # The docstring is missing a return from definition.
    DAR201,
    # The docstring has a return not in definition.
    DAR202,
    # The docstring parameter type doesn't match function.
    DAR203,
    # The docstring is missing a yield present in definition.
    DAR301,
    # The docstring has a yield not in definition.
    DAR302,
    # The docstring is missing an exception raised.
    DAR401,
    # The docstring describes an exception not explicitly raised.
    DAR402,
    # The docstring describes a variable which is not defined.
    DAR501,

# for the flake-darglint plugin
docstring_style = GOOGLE


#
# mypy configuration -- static type checker
#
# Usage:
#    # run static type checking
#    $ mypy /some/files --config-file=.mypy.ini
#
#    # override mypy error for one line:
#    add a comment "# type: ignore" above the problem line and we'll discuss it in the PR
#
# See: https://mypy.readthedocs.io/en/stable/running_mypy.html
#
# Resolving Errors:
#   Error: Cannot find implementation or library stub for module named 'kafka'
#
#       some 3rd party libraries are not registered with mypy (they don't have stubs)
#       this causes a "missing imports" error. Please don't disable these warnings altogether.
#       Instead, you should do the following:
#   
#       (1) google "mypy stubs for X" <-- X could be boto3, kafka, etc.:
#             if you find a package implementing the stubs (such as boto-stubs[essentia]),
#             add it to the "linting" extras in setup.py so that
#             pip install pythoncore[linting] --- will call --- pip install boto-stubs[essential]
#   
#       (2) if there is no mypy stub project, suppress warnings for that library:
#             for "kafka" you would add a [mypy-kafka.*] section as below
#

[mypy]

[mypy-email_validator.*]
ignore_missing_imports = True

[mypy-phonenumbers.*]
ignore_missing_imports = True

[mypy-pyarrow.*]
ignore_missing_imports = True

[mypy-confluent_kafka.*]
ignore_missing_imports = True

[mypy-kafka.*]
ignore_missing_imports = True

[mypy-jwt.*]
ignore_missing_imports = True

[mypy-snowflake.*]
ignore_missing_imports = True

[mypy-setuptools.*]
ignore_missing_imports = True


#
# pylint configuration -- style guide checker
#
# This file defines how we will lint check our projects.
# It has the following contents:
#     (1) boolean rules; comment out any you wish to disable under "enable"
#     (2) individual rule settings
#

[MASTER]

# boolean rules: to disable a rule, move it and it's description from `enable` to `disable`
disable=all,
        # (W0105): String statement has no effect Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.
        pointless-string-statement,

        # (E1701): Async context manager '%s' doesn't implement __aenter__ and __aexit__. Used when an async context manager is used with an object that does not implement the async context management protocol. This message can't be emitted when using Python < 3.5.
enable=not-async-context-manager,
        # (E1700): Yield inside async function Used when an yield or yield from statement is found inside an async function. This message can't be emitted when using Python < 3.5.
        yield-inside-async-function,
        # (E0103): %r not properly in loop Used when break or continue keywords are used outside a loop.
        not-in-loop,
        # (E0102): %s already defined line %s Used when a function / class / method is redefined.
        function-redefined,
        # (E0116): 'continue' not supported inside 'finally' clause Emitted when the continue keyword is found inside a finally clause, which is a SyntaxError. This message can't be emitted when using Python >= 3.8.
        continue-in-finally,
        # (E0110): Abstract class %r with abstract methods instantiated Used when an abstract class with abc.ABCMeta as metaclass has abstract methods and is instantiated.
        abstract-class-instantiated,
        # (E0114): Can use starred expression only in assignment target Emitted when a star expression is not used in an assignment target.
        star-needs-assignment-target,
        # (E0108): Duplicate argument name %s in function definition Duplicate argument names in function definitions are syntax errors.
        duplicate-argument-name,
        # (E0101): Explicit return in __init__ Used when the special class method __init__ has an explicit return value.
        return-in-init,
        # (E0112): More than one starred expression in assignment Emitted when there are more than one starred expressions (*x) in an assignment. This is a SyntaxError.
        too-many-star-expressions,
        # (E0115): Name %r is nonlocal and global Emitted when a name is both nonlocal and global.
        nonlocal-and-global,
        # (E0118): Name %r is used prior to global declaration Emitted when a name is used prior a global declaration, which results in an error since Python 3.6. This message can't be emitted when using Python < 3.6.
        used-prior-global-declaration,
        # (E0104): Return outside function Used when a "return" statement is found outside a function or method.
        return-outside-function,
        # (E0106): Return with argument inside generator Used when a "return" statement with an argument is found outside in a generator function or method (e.g. with some "yield" statements). This message can't be emitted when using Python >= 3.3.
        return-arg-in-generator,
        # (E0113): Starred assignment target must be in a list or tuple Emitted when a star expression is used as a starred assignment target.
        invalid-star-assignment-target,
        # (E0111): The first reversed() argument is not a sequence Used when the first argument to reversed() builtin isn't a sequence (does not implement __reversed__, nor __getitem__ and __len__
        bad-reversed-sequence,
        # (E0107): Use of the non-existent %s operator Used when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which doesn't exist in Python.
        nonexistent-operator,
        # (E0105): Yield outside function Used when a "yield" statement is found outside a function or method.
        yield-outside-function,
        # (E0100): __init__ method is a generator Used when the special class method __init__ is turned into a generator by a yield in its body.
        init-is-generator,
        # (E0119): format function is not called on str Emitted when format function is not called on str object. e.g doing print("value: {}").format(123) instead of print("value: {}".format(123)). This might not be what the user intended to do.
        misplaced-format-function,
        # (E0117): nonlocal name %s found without binding Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes
        nonlocal-without-binding,
        # (W0150): %s statement in finally block may swallow exception Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.
        lost-exception,
        # (W0199): Assert called on a 2-item-tuple. Did you mean 'assert x,y'? A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.
        assert-on-tuple,
        # (W0129): Assert statement has a string literal as its first argument. The assert will %s fail. Used when an assert statement has a string literal as its first argument, which will cause the assert to always pass.
        assert-on-string-literal,
        # (W0127): Assigning the same variable %r to itself Emitted when we detect that a variable is assigned to itself
        self-assigning-variable,
        # (W0143): Comparing against a callable, did you omit the parenthesis? This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.
        comparison-with-callable,
        # (W0102): Dangerous default value %s as argument Used when a mutable value as list or dictionary is detected in a default value for an argument.
        dangerous-default-value,
        # (W0109): Duplicate key %r in dictionary Used when a dictionary expression binds the same key multiple times.
        duplicate-key,
        # (W0120): Else clause on loop without a break statement Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.
        useless-else-on-loop,
        # (W0106): Expression "%s" is assigned to nothing Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.
        expression-not-assigned,
        # (W0124): Following "as" with another context manager looks like a tuple. Emitted when a with statement component returns multiple values and uses name binding with as only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager.
        confusing-with-statement,
        # (W0108): Lambda may not be necessary Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.
        unnecessary-lambda,
        # (W0111): Name %s will become a keyword in Python %s Used when assignment will become invalid in future Python release due to introducing new keyword.
        assign-to-new-keyword,
        # (W0128): Redeclared variable %r in assignment Emitted when we detect that a variable was redeclared in the same assignment.
        redeclared-assigned-name,
        # (W0104): Statement seems to have no effect Used when a statement doesn't have (or at least seems to) any effect.
        pointless-statement,
        # (W0107): Unnecessary pass statement Used when a "pass" statement that can be avoided is encountered.
        unnecessary-pass,
        # (W0101): Unreachable code Used when there is some code behind a "return" or "raise" statement, which will never be accessed.
        unreachable,
        # (W0123): Use of eval Used when you use the "eval" function, to discourage its usage. Consider using ast.literal_eval for safely evaluating strings containing Python expressions from untrusted sources.
        eval-used,
        # (W0122): Use of exec Used when you use the "exec" statement (function for Python 3), to discourage its usage. That doesn't mean you cannot use it !
        exec-used,
        # (W0125): Using a conditional statement with a constant value Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.
        using-constant-test,
        # (W0126): Using a conditional statement with potentially wrong function or method call due to missing parentheses Emitted when a conditional statement (If or ternary if) seems to wrongly call a function due to missing parentheses
        missing-parentheses-for-call-in-test,
        # (R0123): Comparison to literal Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.
        literal-comparison,
        # (R0124): Redundant comparison - %s Used when something is compared against itself.
        comparison-with-itself,
        # (C0144): %s name "%s" contains a non-ASCII unicode character Used when the name contains at least one non-ASCII unicode character.
        non-ascii-name,
        # (C0103): %s name "%s" doesn't conform to %s Used when the name doesn't conform to naming rules associated to its type (constant, variable, class...).
        invalid-name,
        # (C0102): Black listed name "%s" Used when the name is listed in the black list (unauthorized names).
        blacklisted-name,
        # (C0121): Comparison %s should be %s Used when an expression is compared to singleton values like True, False or None.
        singleton-comparison,
        # (C0122): Comparison should be %s Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.
        misplaced-comparison-constant,
        # (C0112): Empty %s docstring Used when a module, function, class or method has an empty docstring (it would be too easy ;).
        empty-docstring,
        # (C0115): Missing class docstring Used when a class has no docstring.Even an empty class must have a docstring.
        missing-class-docstring,
        # (C0116): Missing function or method docstring Used when a function or method has no docstring.Some special methods like __init__ do not require a docstring.
        missing-function-docstring,
        # (C0114): Missing module docstring Used when a module has no docstring.Empty modules do not require a docstring.
        missing-module-docstring,
        # (C0123): Using type() instead of isinstance() for a typecheck. The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.
        unidiomatic-typecheck,
        # (E0203): Access to member %r before its definition line %s Used when an instance member is accessed before it's actually assigned.
        access-member-before-definition,
        # (E0202): An attribute defined in %s line %s hides this method Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.
        method-hidden,
        # (E0237): Assigning to attribute %r not defined in class slots Used when assigning to an attribute not defined in the class slots.
        assigning-non-slot,
        # (E0241): Duplicate bases for class %r Used when a class has duplicate bases.
        duplicate-bases,
        # (E0240): Inconsistent method resolution order for class %r Used when a class has an inconsistent method resolution order.
        inconsistent-mro,
        # (E0239): Inheriting %r, which is not a class. Used when a class inherits from something which is not a class.
        inherit-non-class,
        # (E0238): Invalid __slots__ object Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.
        invalid-slots,
        # (E0236): Invalid object %r in __slots__, must contain only non empty strings Used when an invalid (non-string) object occurs in __slots__.
        invalid-slots-object,
        # (E0211): Method has no argument Used when a method which should have the bound instance as first argument has no argument defined.
        no-method-argument,
        # (E0213): Method should have "self" as first argument Used when a method has an attribute different the "self" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!
        no-self-argument,
        # (E0302): The special method %r expects %s param(s), %d %s given Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.
        unexpected-special-method-signature,
        # (E0242): Value %r in slots conflicts with class variable Used when a value in __slots__ conflicts with a class variable, property or method.
        class-variable-slots-conflict,
        # (E0304): __bool__ does not return bool Used when a __bool__ method returns something which is not a bool
        invalid-bool-returned,
        # (E0308): __bytes__ does not return bytes Used when a __bytes__ method returns something which is not bytes
        invalid-bytes-returned,
        # (E0311): __format__ does not return str Used when a __format__ method returns something which is not a string
        invalid-format-returned,
        # (E0312): __getnewargs__ does not return a tuple Used when a __getnewargs__ method returns something which is not a tuple
        invalid-getnewargs-returned,
        # (E0313): __getnewargs_ex__ does not return a tuple containing (tuple, dict) Used when a __getnewargs_ex__ method returns something which is not of the form tuple(tuple, dict)
        invalid-getnewargs-ex-returned,
        # (E0309): __hash__ does not return int Used when a __hash__ method returns something which is not an integer
        invalid-hash-returned,
        # (E0305): __index__ does not return int Used when an __index__ method returns something which is not an integer
        invalid-index-returned,
        # (E0301): __iter__ returns non-iterator Used when an __iter__ method returns something which is not an iterable (i.e. has no __next__ method)
        non-iterator-returned,
        # (E0303): __len__ does not return non-negative integer Used when a __len__ method returns something which is not a non-negative integer
        invalid-length-returned,
        # (E0310): __length_hint__ does not return non-negative integer Used when a __length_hint__ method returns something which is not a non- negative integer
        invalid-length-hint-returned,
        # (E0306): __repr__ does not return str Used when a __repr__ method returns something which is not a string
        invalid-repr-returned,
        # (E0307): __str__ does not return str Used when a __str__ method returns something which is not a string
        invalid-str-returned,
        # (W0212): Access to a protected member %s of a client class Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.
        protected-access,
        # (W0201): Attribute %r defined outside __init__ Used when an instance attribute is defined outside the __init__ method.
        attribute-defined-outside-init,
        # (W0232): Class has no __init__ method Used when a class has no __init__ method, neither its parent classes.
        no-init,
        # (W0223): Method %r is abstract in class %r but is not overridden Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.
        abstract-method,
        # (W0236): Method %r was expected to be %r, found it instead as %r Used when we detect that a method was overridden in a way that does not match its base class which could result in potential bugs at runtime.
        invalid-overridden-method,
        # (W0221): Parameters differ from %s %r method Used when a method has a different number of arguments than in the implemented interface or in an overridden method.
        arguments-differ,
        # (W0222): Signature differs from %s %r method Used when a method signature is different than in the implemented interface or in an overridden method.
        signature-differs,
        # (W0211): Static method with %r as first argument Used when a static method has "self" or a value specified in valid- classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.
        bad-staticmethod-argument,
        # (W0235): Useless super delegation in method %r Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.
        useless-super-delegation,
        # (W0233): __init__ method from a non direct base class %r is called Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.
        non-parent-init-called,
        # (W0231): __init__ method from base class %r is not called Used when an ancestor class method has an __init__ method which is not called by a derived class.
        super-init-not-called,
        # (R0206): Cannot have defined parameters for properties Used when we detect that a property also has parameters, which are useless, given that properties cannot be called with additional arguments.
        property-with-parameters,
        # (R0205): Class %r inherits from object, can be safely removed from bases in python3 Used when a class inherit from object, which under python3 is implicit, hence can be safely removed from bases.
        useless-object-inheritance,
        # (R0202): Consider using a decorator instead of calling classmethod Used when a class method is defined without using the decorator syntax.
        no-classmethod-decorator,
        # (R0203): Consider using a decorator instead of calling staticmethod Used when a static method is defined without using the decorator syntax.
        no-staticmethod-decorator,
        # (R0201): Method could be a function Used when a method doesn't use its bound instance, and so could be written as a function.
        no-self-use,
        # (C0205): Class __slots__ should be a non-string iterable Used when a class __slots__ is a simple string, rather than an iterable.
        single-string-used-for-slots,
        # (C0202): Class method %s should have %s as first argument Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to "cls"), recommended to easily differentiate them from regular instance methods.
        bad-classmethod-argument,
        # (C0204): Metaclass class method %s should have %s as first argument Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to "mcs"), recommended to easily differentiate them from regular instance methods.
        bad-mcs-classmethod-argument,
        # (C0203): Metaclass method %s should have %s as first argument Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to "cls"), recommended to easily differentiate them from regular instance methods.
        bad-mcs-method-argument,
        # (F0202): Unable to check methods signature (%s / %s) Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.
        method-check-failed,
        # (R0903): Too few public methods (%s/%s) Used when class has too few public methods, so be sure it's really worth it.
        too-few-public-methods,
        # (R0901): Too many ancestors (%s/%s) Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.
        too-many-ancestors,
        # (R0913): Too many arguments (%s/%s) Used when a function or method takes too many arguments.
        too-many-arguments,
        # (R0916): Too many boolean expressions in if statement (%s/%s) Used when an if statement contains too many boolean expressions.
        too-many-boolean-expressions,
        # (R0912): Too many branches (%s/%s) Used when a function or method has too many branches, making it hard to follow.
        too-many-branches,
        # (R0902): Too many instance attributes (%s/%s) Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.
        too-many-instance-attributes,
        # (R0914): Too many local variables (%s/%s) Used when a function or method has too many local variables.
        too-many-locals,
        # (R0904): Too many public methods (%s/%s) Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.
        too-many-public-methods,
        # (R0911): Too many return statements (%s/%s) Used when a function or method has too many return statement, making it hard to follow.
        too-many-return-statements,
        # (R0915): Too many statements (%s/%s) Used when a function or method has too many statements. You should then split it in smaller functions / methods.
        too-many-statements,
        # (E0701): Bad except clauses order (%s) Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.
        bad-except-order,
        # (E0712): Catching an exception which doesn't inherit from Exception: %s Used when a class which doesn't inherit from Exception is used as an exception in an except clause.
        catching-non-exception,
        # (E0703): Exception context set to something which is not an exception, nor None Used when using the syntax "raise ... from ...", where the exception context is not an exception, nor None.
        bad-exception-context,
        # (E0711): NotImplemented raised - should raise NotImplementedError Used when NotImplemented is raised instead of NotImplementedError
        notimplemented-raised,
        # (E0702): Raising %s while only classes or instances are allowed Used when something which is neither a class, an instance or a string is raised (i.e. a TypeError will be raised).
        raising-bad-type,
        # (E0710): Raising a new style class which doesn't inherit from BaseException Used when a new style class which doesn't inherit from BaseException is raised.
        raising-non-exception,
        # (E0704): The raise statement is not inside an except clause Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.
        misplaced-bare-raise,
        # (W0705): Catching previously caught exception type %s Used when an except catches a type that was already caught by a previous handler.
        duplicate-except,
        # (W0703): Catching too general exception %s Used when an except catches a too general exception, possibly burying unrelated errors.
        broad-except,
        # (W0707): Consider explicitly re-raising using the 'from' keyword Python 3's exception chaining means it shows the traceback of the current exception, but also the original exception. Not using raise from makes the traceback inaccurate, because the message implies there is a bug in the exception-handling code itself, which is a separate situation than wrapping an exception.
        raise-missing-from,
        # (W0715): Exception arguments suggest string formatting might be intended Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting
        raising-format-tuple,
        # (W0711): Exception to catch is the result of a binary "%s" operation Used when the exception to catch is of the form "except A or B:". If intending to catch multiple, rewrite as "except (A, B): wrong-exception-operation (W0716): Invalid exception operation. %s Used when an operation is done against an exception, but the operation is not valid for the exception in question. Usually emitted when having binary operations between exceptions in except handlers.
        binary-op-exception,
        # (W0702): No exception type(s) specified Used when an except clause doesn't specify exceptions type to catch.
        bare-except,
        # (W0706): The except handler raises immediately Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!
        try-except-raise,
        # (W0311): Bad indentation. Found %s %s, expected %s Used when an unexpected number of indentation's tabulations or spaces has been found.
        bad-indentation,
        # (W0301): Unnecessary semicolon Used when a statement is ended by a semi-colon (";"), which isn't necessary (that's python, not C ;).
        unnecessary-semicolon,
        # (C0304): Final newline missing Used when the last line in a file is missing a newline.
        missing-final-newline,
        # (C0301): Line too long (%s/%s) Used when a line is longer than a given number of characters.
        line-too-long,
        # (C0327): Mixed line endings LF and CRLF Used when there are mixed (LF and CRLF) newline signs in a file.
        mixed-line-endings,
        # (C0321): More than one statement on a single line Used when more than on statement are found on the same line.
        multiple-statements,
        # (C0302): Too many lines in module (%s/%s) Used when a module has too many lines, reducing its readability.
        too-many-lines,
        # (C0305): Trailing newlines Used when there are trailing blank lines in a file.
        trailing-newlines,
        # (C0303): Trailing whitespace Used when there is whitespace between the end of a line and the newline.
        trailing-whitespace,
        # (C0328): Unexpected line ending format. There is '%s' while it should be '%s'. Used when there is different newline than expected.
        unexpected-line-ending-format,
        # (C0325): Unnecessary parens after %r keyword Used when a single item in parentheses follows an if, for, or other keyword.
        superfluous-parens,
        # (E0402): Attempted relative import beyond top-level package Used when a relative import tries to access too many levels in the current package.
        relative-beyond-top-level,
        # (E0401): Unable to import %s Used when pylint has been unable to import a module.
        import-error,
        # (W0406): Module import itself Used when a module is importing itself.
        import-self,
        # (W0407): Prefer importing %r instead of %r Used when a module imported has a preferred replacement module.
        preferred-module,
        # (W0404): Reimport %r (imported line %s) Used when a module is reimported multiple times.
        reimported,
        # (W0402): Uses of a deprecated module %r Used a module marked as deprecated is imported.
        deprecated-module,
        # (W0401): Wildcard import %s Used when from module import * is detected.
        wildcard-import,
        # (W0410): __future__ import is not the first non docstring statement Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.
        misplaced-future,
        # (R0401): Cyclic import (%s) Used when a cyclic import between two or more modules is detected.
        cyclic-import,
        # (C0411): %s should be placed before %s Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports)
        wrong-import-order,
        # (C0413): Import "%s" should be placed at the top of the module Used when code and imports are mixed
        wrong-import-position,
        # (C0414): Import alias does not rename original package Used when an import alias is same as original package.e.g using import numpy as numpy instead of import numpy as np
        useless-import-alias,
        # (C0415): Import outside toplevel (%s) Used when an import statement is used anywhere other than the module toplevel. Move this import to the top of the file.
        import-outside-toplevel,
        # (C0412): Imports from package %s are not grouped Used when imports are not grouped by packages
        ungrouped-imports,
        # (C0410): Multiple imports on one line (%s) Used when import statement importing multiple modules is detected.
        multiple-imports,
        # (E1201): Logging format string ends in middle of conversion specifier Used when a logging statement format string terminates before the end of a conversion specifier.
        logging-format-truncated,
        # (E1206): Not enough arguments for logging format string Used when a logging format string is given too few arguments.
        logging-too-few-args,
        # (E1205): Too many arguments for logging format string Used when a logging format string is given too many arguments.
        logging-too-many-args,
        # (E1200): Unsupported logging format character %r (%#02x) at index %d Used when an unsupported format character is used in a logging statement format string.
        logging-unsupported-format,
        # (W1202): Use %s formatting in logging functions Used when a logging statement has a call form of "logging.<logging method>(format_string.format(format_args...))". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring- interpolation is disabled then you can use fstring formatting. If logging- not-lazy is disabled then you can use % formatting as normal.
        logging-format-interpolation,
        # (W1203): Use %s formatting in logging functions Used when a logging statement has a call form of "logging.<logging method>(f"...")".Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-format-interpolation is disabled then you can use str.format. If logging-not-lazy is disabled then you can use % formatting as normal.
        logging-fstring-interpolation,
        # (W1201): Use %s formatting in logging functions Used when a logging statement has a call form of "logging.<logging method>(format_string % (format_args...))". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring- interpolation is disabled then you can use fstring formatting. If logging- format-interpolation is disabled then you can use str.format.
        logging-not-lazy,
        # (W0511):	Used when a warning note as FIXME or XXX is detected 
        fixme,
        # (I0023): Used when a message is enabled or disabled by id.
        use-symbolic-message-instead,
        # (E1003): Bad first argument %r given to super() Used when another argument than the current class is given as first argument of the super builtin.
        bad-super-call,
        # (E1603): Implicit unpacking of exceptions is not supported in Python 3 Python3 will not allow implicit unpacking of exceptions in except clauses. See https://www.python.org/dev/peps/pep-3110/
        unpacking-in-except,
        # (E1609): Import * only allowed at module level Used when the import star syntax is used somewhere else than the module level. This message can't be emitted when using Python >= 3.0.
        import-star-module-level,
        # (E1610): Non-ascii bytes literals not supported in 3.x Used when non-ascii bytes literals are found in a program. They are no longer supported in Python 3. This message can't be emitted when using Python >= 3.0.
        non-ascii-bytes-literal,
        # (E1602): Parameter unpacking specified Used when parameter unpacking is specified for a function(Python 3 doesn't allow it)
        parameter-unpacking,
        # (E1606): Use of long suffix Used when "l" or "L" is used to mark a long integer. This will not work in Python 3, since int and long types have merged. This message can't be emitted when using Python >= 3.0.
        long-suffix,
        # (E1608): Use of old octal literal Used when encountering the old octal syntax, removed in Python 3. To use the new syntax, prepend 0o on the number. This message can't be emitted when using Python >= 3.0.
        old-octal-literal,
        # (E1607): Use of the <> operator Used when the deprecated "<>" operator is used instead of "!=". This is removed in Python 3. This message can't be emitted when using Python >= 3.0.
        old-ne-operator,
        # (E1605): Use of the `` operator Used when the deprecated "``" (backtick) operator is used instead of the str() function.
        backtick,
        # (E1604): Use raise ErrorClass(args) instead of raise ErrorClass, args. Used when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.
        old-raise-syntax,
        # (E1601): print statement used Used when a print statement is used (print is a function in Python 3)
        print-statement,
        # (W1652): Accessing a deprecated fields on the types module Used when accessing a field on types that has been removed in Python 3.
        deprecated-types-field,
        # (W1651): Accessing a deprecated function on the itertools module Used when accessing a function on itertools that has been removed in Python 3.
        deprecated-itertools-function,
        # (W1649): Accessing a deprecated function on the string module Used when accessing a string function that has been deprecated in Python 3.
        deprecated-string-function,
        # (W1657): Accessing a removed attribute on the operator module Used when accessing a field on operator module that has been removed in Python 3.
        deprecated-operator-function,
        # (W1660): Accessing a removed attribute on the sys module Used when accessing a field on sys module that has been removed in Python 3.
        deprecated-sys-function,
        # (W1658): Accessing a removed attribute on the urllib module Used when accessing a field on urllib module that has been removed or moved in Python 3.
        deprecated-urllib-function,
        # (W1659): Accessing a removed xreadlines attribute Used when accessing the xreadlines() function on a file stream, removed in Python 3.
        xreadlines-attribute,
        # (W1623): Assigning to a class's __metaclass__ attribute Used when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument)
        metaclass-assignment,
        # (W1622): Called a next() method on an object Used when an object's next() method is called (Python 3 uses the next() built-in function)
        next-method-called,
        # (W1620): Calling a dict.iter*() method Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods)
        dict-iter-method,
        # (W1621): Calling a dict.view*() method Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods)
        dict-view-method,
        # (W1645): Exception.message removed in Python 3 Used when the message attribute is accessed on an Exception. Use str(exception) instead.
        exception-message-attribute,
        # (W1641): Implementing __eq__ without also implementing __hash__ Used when a class implements __eq__ but not __hash__. In Python 2, objects get object.__hash__ as the default implementation, in Python 3 objects get None as their default __hash__ implementation if they also implement __eq__.
        eq-without-hash,
        # (W1624): Indexing exceptions will not work on Python 3 Indexing exceptions will not work on Python 3. Use exception.args[index] instead.
        indexing-exception,
        # (W1648): Module moved in Python 3 Used when importing a module that no longer exists in Python 3.
        bad-python3-import,
        # (W1625): Raising a string exception Used when a string exception is raised. This will not work on Python 3.
        raising-string,
        # (W1611): StandardError built-in referenced Used when the StandardError built-in function is referenced (missing from Python 3)
        standarderror-builtin,
        # (W1662): Using a variable that was bound inside a comprehension Emitted when using a variable, that was bound in a comprehension handler, outside of the comprehension itself. On Python 3 these variables will be deleted outside of the comprehension.
        comprehension-escape,
        # (W1661): Using an exception object that was bound by an except handler Emitted when using an exception, that was bound in an except handler, outside of the except handler. On Python 3 these exceptions will be deleted once they get out of the except handler.
        exception-escape,
        # (W1650): Using str.translate with deprecated deletechars parameters Used when using the deprecated deletechars parameters from str.translate. Use re.sub to remove the desired characters
        deprecated-str-translate-call,
        # (W1640): Using the cmp argument for list.sort / sorted Using the cmp argument for list.sort or the sorted builtin should be avoided, since it was removed in Python 3. Using either key or functools.cmp_to_key should be preferred.
        using-cmp-argument,
        # (W1630): __cmp__ method defined Used when a __cmp__ method is defined (method is not used by Python 3)
        cmp-method,
        # (W1614): __coerce__ method defined Used when a __coerce__ method is defined (method is not used by Python 3)
        coerce-method,
        # (W1615): __delslice__ method defined Used when a __delslice__ method is defined (method is not used by Python 3)
        delslice-method,
        # (W1642): __div__ method defined Used when a __div__ method is defined. Using __truediv__ and setting__div__ = __truediv__ should be preferred.(method is not used by Python 3)
        div-method,
        # (W1616): __getslice__ method defined Used when a __getslice__ method is defined (method is not used by Python 3)
        getslice-method,
        # (W1628): __hex__ method defined Used when a __hex__ method is defined (method is not used by Python 3)
        hex-method,
        # (W1643): __idiv__ method defined Used when an __idiv__ method is defined. Using __itruediv__ and setting__idiv__ = __itruediv__ should be preferred.(method is not used by Python 3)
        idiv-method,
        # (W1629): __nonzero__ method defined Used when a __nonzero__ method is defined (method is not used by Python 3)
        nonzero-method,
        # (W1627): __oct__ method defined Used when an __oct__ method is defined (method is not used by Python 3)
        oct-method,
        # (W1644): __rdiv__ method defined Used when a __rdiv__ method is defined. Using __rtruediv__ and setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by Python 3)
        rdiv-method,
        # (W1617): __setslice__ method defined Used when a __setslice__ method is defined (method is not used by Python 3)
        setslice-method,
        # (W1601): apply built-in referenced Used when the apply built-in function is referenced (missing from Python 3)
        apply-builtin,
        # (W1602): basestring built-in referenced Used when the basestring built-in function is referenced (missing from Python 3)
        basestring-builtin,
        # (W1603): buffer built-in referenced Used when the buffer built-in function is referenced (missing from Python 3)
        buffer-builtin,
        # (W1604): cmp built-in referenced Used when the cmp built-in function is referenced (missing from Python 3)
        cmp-builtin,
        # (W1605): coerce built-in referenced Used when the coerce built-in function is referenced (missing from Python 3)
        coerce-builtin,
        # (W1654): dict.items referenced when not iterating Used when dict.items is referenced in a non-iterating context (returns an iterator in Python 3)
        dict-items-not-iterating,
        # (W1655): dict.keys referenced when not iterating Used when dict.keys is referenced in a non-iterating context (returns an iterator in Python 3)
        dict-keys-not-iterating,
        # (W1656): dict.values referenced when not iterating Used when dict.values is referenced in a non-iterating context (returns an iterator in Python 3)
        dict-values-not-iterating,
        # (W1619): division w/o __future__ statement Used for non-floor division w/o a float literal or from __future__ import division (Python 3 returns a float for int division unconditionally)
        old-division,
        # (W1606): execfile built-in referenced Used when the execfile built-in function is referenced (missing from Python 3)
        execfile-builtin,
        # (W1607): file built-in referenced Used when the file built-in function is referenced (missing from Python 3)
        file-builtin,
        # (W1639): filter built-in referenced when not iterating Used when the filter built-in is referenced in a non-iterating context (returns an iterator in Python 3)
        filter-builtin-not-iterating,
        # (W1618): import missing `from __future__ import absolute_import` Used when an import is not accompanied by from __future__ import absolute_import (default behaviour in Python 3)
        no-absolute-import,
        # (W1632): input built-in referenced Used when the input built-in is referenced (backwards-incompatible semantics in Python 3)
        input-builtin,
        # (W1634): intern built-in referenced Used when the intern built-in is referenced (Moved to sys.intern in Python 3)
        intern-builtin,
        # (W1608): long built-in referenced Used when the long built-in function is referenced (missing from Python 3)
        long-builtin,
        # (W1636): map built-in referenced when not iterating Used when the map built-in is referenced in a non-iterating context (returns an iterator in Python 3)
        map-builtin-not-iterating,
        # (W1653): next method defined Used when a next method is defined that would be an iterator in Python 2 but is treated as a normal function in Python 3.
        next-method-defined,
        # (W1646): non-text encoding used in str.decode Used when using str.encode or str.decode with a non-text encoding. Use codecs module to handle arbitrary codecs.
        invalid-str-codec,
        # (W1638): range built-in referenced when not iterating Used when the range built-in is referenced in a non-iterating context (returns a range in Python 3)
        range-builtin-not-iterating,
        # (W1609): raw_input built-in referenced Used when the raw_input built-in function is referenced (missing from Python 3)
        raw_input-builtin,
        # (W1610): reduce built-in referenced Used when the reduce built-in function is referenced (missing from Python 3)
        reduce-builtin,
        # (W1626): reload built-in referenced Used when the reload built-in function is referenced (missing from Python 3). You can use instead imp.reload or importlib.reload.
        reload-builtin,
        # (W1633): round built-in referenced Used when the round built-in is referenced (backwards-incompatible semantics in Python 3)
        round-builtin,
        # (W1647): sys.maxint removed in Python 3 Used when accessing sys.maxint. Use sys.maxsize instead.
        sys-max-int,
        # (W1635): unichr built-in referenced Used when the unichr built-in is referenced (Use chr in Python 3)
        unichr-builtin,
        # (W1612): unicode built-in referenced Used when the unicode built-in function is referenced (missing from Python 3)
        unicode-builtin,
        # (W1613): xrange built-in referenced Used when the xrange built-in function is referenced (missing from Python 3)
        xrange-builtin,
        # (W1637): zip built-in referenced when not iterating Used when the zip built-in is referenced in a non-iterating context (returns an iterator in Python 3)
        zip-builtin-not-iterating,
        # (R1726): Boolean condition '%s' may be simplified to '%s' Emitted when a boolean condition is able to be simplified.
        simplifiable-condition,
        # (R1727): Boolean condition '%s' will always evaluate to '%s' Emitted when a boolean condition can be simplified to a constant value.
        condition-evals-to-constant,
        # (R1709): Boolean expression may be simplified to %s Emitted when redundant pre-python 2.5 ternary syntax is used.
        simplify-boolean-expression,
        # (R1714): Consider merging these comparisons with "in" to %r To check if a variable is equal to one of many values,combine the values into a tuple and check if the variable is contained "in" it instead of checking for equality against each of the values.This is faster and less verbose.
        consider-using-in,
        # (R1701): Consider merging these isinstance calls to isinstance(%s, (%s)) Used when multiple consecutive isinstance calls can be merged into one.
        consider-merging-isinstance,
        # (R1725): Consider using Python 3 style super() without arguments Emitted when calling the super() builtin with the current class and instance. On Python 3 these arguments are the default and they can be omitted.
        super-with-arguments,
        # (R1717): Consider using a dictionary comprehension Emitted when we detect the creation of a dictionary using the dict() callable and a transient list. Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a dict comprehension.Also it is faster since you don't need to create another transient list
        consider-using-dict-comprehension,
        # (R1718): Consider using a set comprehension Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a set comprehension.Also it is faster since you don't need to create another transient list
        consider-using-set-comprehension,
        # (R1715): Consider using dict.get for getting values from a dict if a key is present or a default if not Using the builtin dict.get for getting a value from a dictionary if a key is present or a default if not, is simpler and considered more idiomatic, although sometimes a bit slower
        consider-using-get,
        # (R1713): Consider using str.join(sequence) for concatenating strings from an iterable Using str.join(sequence) is faster, uses less memory and increases readability compared to for-loop iteration.
        consider-using-join,
        # (R1722): Consider using sys.exit() Instead of using exit() or quit(), consider using the sys.exit().
        consider-using-sys-exit,
        # (R1706): Consider using ternary (%s) Used when one of known pre-python 2.5 ternary syntax is used.
        consider-using-ternary,
        # (R1712): Consider using tuple unpacking for swapping variables You do not have to use a temporary variable in order to swap variables. Using "tuple unpacking" to directly swap variables makes the intention more clear.
        consider-swap-variables,
        # (R1707): Disallow trailing comma tuple In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.
        trailing-comma-tuple,
        # (R1708): Do not raise StopIteration in generator, use return statement instead According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement
        stop-iteration-return,
        # (R1710): Either all return statements in a function should return an expression, or none of them should. According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable)
        inconsistent-return-statements,
        # (R1704): Redefining argument with the local name %r Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.
        redefined-argument-from-local,
        # (R1716): Simplify chained comparison between the operands This message is emitted when pylint encounters boolean operation like"a < b and b < c", suggesting instead to refactor it to "a < b < c"
        chained-comparison,
        # (R1719): The if expression can be replaced with %s Used when an if expression can be replaced with 'bool(test)'.
        simplifiable-if-expression,
        # (R1703): The if statement can be replaced with %s Used when an if statement can be replaced with 'bool(test)'.
        simplifiable-if-statement,
        # (R1702): Too many nested blocks (%s/%s) Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.
        too-many-nested-blocks,
        # (R1723): Unnecessary "%s" after "break" Used in order to highlight an unnecessary block of code following an if containing a break statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a break statement.
        no-else-break,
        # (R1724): Unnecessary "%s" after "continue" Used in order to highlight an unnecessary block of code following an if containing a continue statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a continue statement.
        no-else-continue,
        # (R1720): Unnecessary "%s" after "raise" Used in order to highlight an unnecessary block of code following an if containing a raise statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a raise statement.
        no-else-raise,
        # (R1705): Unnecessary "%s" after "return" Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.
        no-else-return,
        # (R1721): Unnecessary use of a comprehension Instead of using an identity comprehension, consider using the list, dict or set constructor. It is faster and simpler.
        unnecessary-comprehension,
        # (R1711): Useless return at end of function or method Emitted when a single "return" or "return None" statement is found at the end of function or method definition. This statement can safely be removed because Python will implicitly return None
        useless-return,
        # (C0113): Consider changing "%s" to "%s" Used when a boolean expression contains an unneeded negation.
        unneeded-not,
        # (C0201): Consider iterating the dictionary directly instead of calling .keys() Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in "for key in dictionary".
        consider-iterating-dictionary,
        # (C0200): Consider using enumerate instead of iterating with range and len Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.
        consider-using-enumerate,
        # (C1801): Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty Used when Pylint detects that len(sequence) is being used without explicit comparison inside a condition to determine if a sequence is empty. Instead of coercing the length to a boolean, either rely on the fact that empty sequences are false or compare the length against a scalar.
        len-as-condition,
        # (R0801): Similar lines in %s files Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.
        duplicate-code,
        # (C0403): Invalid characters %r in a docstring Used when a word in docstring cannot be checked by enchant.
        invalid-characters-in-docstring,
        # (C0401): Wrong spelling of a word '%s' in a comment: Used when a word in comment is not spelled correctly.
        wrong-spelling-in-comment,
        # (C0402): Wrong spelling of a word '%s' in a docstring: Used when a word in docstring is not spelled correctly.
        wrong-spelling-in-docstring,
        # (E1507): %s does not support %s type argument Env manipulation functions support only string type arguments. See https://docs.python.org/3/library/os.html#os.getenv.
        invalid-envvar-value,
        # (W1501): "%s" is not a valid mode for open. Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See https://docs.python.org/2/library/functions.html#open
        bad-open-mode,
        # (W1508): %s default type is %s. Expected str or None. Env manipulation functions return None or str values. Supplying anything different as a default may cause bugs. See https://docs.python.org/3/library/os.html#os.getenv.
        invalid-envvar-default,
        # (W1503): Redundant use of %s with constant value %r The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.
        redundant-unittest-assert,
        # (W1507): Using copy.copy(os.environ). Use os.environ.copy() instead. os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See https://bugs.python.org/issue15373 for reference.
        shallow-copy-environ,
        # (W1502): Using datetime.time in a boolean context. Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See https://bugs.python.org/issue13936 for reference. This message can't be emitted when using Python >= 3.5.
        boolean-datetime,
        # (W1505): Using deprecated method %s() The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.
        deprecated-method,
        # (W1509): Using preexec_fn keyword which may be unsafe in the presence of threads The preexec_fn parameter is not safe to use in the presence of threads in your application. The child process could deadlock before exec is called. If you must use it, keep it trivial! Minimize the number of libraries you call into.https://docs.python.org/3/library/subprocess.html#popen-constructor
        subprocess-popen-preexec-fn,
        # (W1510): Using subprocess.run without explicitly set `check` is not recommended. The check parameter should always be used with explicitly set check keyword to make clear what the error-handling behavior is.https://docs.python.org/3/library/subprocess.html#subprocess.run
        subprocess-run-check,
        # (W1506): threading.Thread needs the target function The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.
        bad-thread-instantiation,
        # (E1307): Argument %r does not match format type %r Used when a type required by format string is not suitable for actual argument type
        bad-string-format-type,
        # (E1303): Expected mapping for format string, not %s Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.
        format-needs-mapping,
        # (E1301): Format string ends in middle of conversion specifier Used when a format string terminates before the end of a conversion specifier.
        truncated-format-string,
        # (E1304): Missing key %r in format string dictionary Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.
        missing-format-string-key,
        # (E1302): Mixing named and unnamed conversion specifiers in format string Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.
        mixed-format-string,
        # (E1306): Not enough arguments for format string Used when a format string that uses unnamed conversion specifiers is given too few arguments
        too-few-format-args,
        # (E1310): Suspicious argument in %s.%s call The argument to a str.{l,r,}strip call contains a duplicate character,
        bad-str-strip-call,
        # (E1305): Too many arguments for format string Used when a format string that uses unnamed conversion specifiers is given too many arguments.
        too-many-format-args,
        # (E1300): Unsupported format character %r (%#02x) at index %d Used when an unsupported format character is used in a format string.
        bad-format-character,
        # (W1402): Anomalous Unicode escape in byte string: '%s'. String constant might be missing an r or u prefix. Used when an escape like u is encountered in a byte string where it has no effect.
        anomalous-unicode-escape-in-string,
        # (W1401): Anomalous backslash in string: '%s'. String constant might be missing an r prefix. Used when a backslash is in a literal string but not as an escape.
        anomalous-backslash-in-string,
        # (W1308): Duplicate string formatting argument %r, consider passing as named argument Used when we detect that a string formatting is repeating an argument instead of using named string arguments
        duplicate-string-formatting-argument,
        # (W1305): Format string contains both automatic field numbering and manual field specification Used when a PEP 3101 format string contains both automatic field numbering (e.g. '{}') and manual field specification (e.g. '{0}').
        format-combined-specification,
        # (W1300): Format string dictionary key should be a string, not %s Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.
        bad-format-string-key,
        # (W1404): Implicit string concatenation found in %s String literals are implicitly concatenated in a literal iterable definition : maybe a comma is missing ?
        implicit-str-concat,
        # (W1302): Invalid format string Used when a PEP 3101 format string is invalid.
        bad-format-string,
        # (W1306): Missing format attribute %r in format specifier %r Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn't have that attribute.
        missing-format-attribute,
        # (W1303): Missing keyword argument %r for format string Used when a PEP 3101 format string that uses named fields doesn't receive one or more required keywords.
        missing-format-argument-key,
        # (W1405): Quote delimiter %s is inconsistent with the rest of the file Quote delimiters are not used consistently throughout a module (with allowances made for avoiding unnecessary escaping).
        inconsistent-quotes,
        # (W1304): Unused format argument %r Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string.
        unused-format-string-argument,
        # (W1301): Unused key %r in format string dictionary Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.
        unused-format-string-key,
        # (W1309): Using an f-string that does not have any interpolated variables Used when we detect an f-string that does not use any interpolation variables, in which case it can be either a normal string or a bug in the code.
        f-string-without-interpolation,
        # (W1307): Using invalid lookup key %r in format specifier %r Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn't contain or doesn't have that key as an attribute.
        invalid-format-index,
        # (E1137): %r does not support item assignment Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method).
        unsupported-assignment-operation,
        # (E1138): %r does not support item deletion Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method).
        unsupported-delete-operation,
        # (E1130): Emitted when a unary operand is used on an object which does not support this type of operation.
        invalid-unary-operand-type,
        # (E1131): Emitted when a binary arithmetic operation between two operands is not supported.
        unsupported-binary-operation,
        # (E1101): %s %r has no %r member%s Used when a variable is accessed for an unexistent member.
        no-member, 
        # (E1102): %s is not callable Used when an object being called has been inferred to a non callable object.
        not-callable,
        # (E1124): Argument %r passed by position and keyword in %s call Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.
        redundant-keyword-arg,
        # (E1111): Assigning result of a function call, where the function has no return Used when an assignment is done on a function call but the inferred function doesn't return anything.
        assignment-from-no-return,
        # (E1128): Assigning result of a function call, where the function returns None Used when an assignment is done on a function call but the inferred function returns nothing but None.
        assignment-from-none,
        # (E1129): Context manager '%s' doesn't implement __enter__ and __exit__. Used when an instance in a with statement doesn't implement the context manager protocol(__enter__/__exit__).
        not-context-manager,
        # (E1140): Dict key is unhashable Emitted when a dict key is not hashable (i.e. doesn't define __hash__ method).
        unhashable-dict-key,
        # (E1132): Got multiple values for keyword argument %r in function call Emitted when a function call got multiple values for a keyword.
        repeated-keyword,
        # (E1139): Invalid metaclass %r used Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.
        invalid-metaclass,
        # (E1125): Missing mandatory keyword argument %r in %s call Used when a function call does not pass a mandatory keyword-only argument.
        missing-kwoa,
        # (E1120): No value for argument %s in %s call Used when a function call passes too few arguments.
        no-value-for-parameter,
        # (E1133): Non-iterable value %s is used in an iterating context Used when a non-iterable value is used in place where iterable is expected
        not-an-iterable,
        # (E1134): Non-mapping value %s is used in a mapping context Used when a non-mapping value is used in place where mapping is expected
        not-a-mapping,
        # (E1126): Sequence index is not an int, slice, or instance with __index__ Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.
        invalid-sequence-index,
        # (E1127): Slice index is not an int, None, or instance with __index__ Used when a slice index is not an integer, None, or an object with an __index__ method.
        invalid-slice-index,
        # (E1121): Too many positional arguments for %s call Used when a function call passes too many positional arguments.
        too-many-function-args,
        # (E1123): Unexpected keyword argument %r in %s call Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.
        unexpected-keyword-arg,
        # (E1141): Unpacking a dictionary in iteration without calling .items() Emitted when trying to iterate through a dict without calling .items()
        dict-iter-missing-items,
        # (E1135): Value '%s' doesn't support membership test Emitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__).
        unsupported-membership-test,
        # (E1136): Value '%s' is unsubscriptable Emitted when a subscripted value doesn't support subscription (i.e. doesn't define __getitem__ method or __class_getitem__ for a class).
        unsubscriptable-object,
        # (W1113): Keyword argument before variable positional arguments list in the definition of %s function When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.
        keyword-arg-before-vararg,
        # (W1115): Non-string value assigned to __name__ Emitted when a non-string vaue is assigned to __name__
        non-str-assignment-to-dunder-name,
        # (W1114): Positional arguments appear to be out of order Emitted when the caller's argument names fully match the parameter names in the function signature but do not have the same order.
        arguments-out-of-order,
        # (W1116): Second argument of isinstance is not a type Emitted when the second argument of an isinstance call is not a type.
        isinstance-second-argument-not-valid-type,
        # (I1101): %s %r has no %r member%s, but source is unavailable. Consider adding this module to extension-pkg-whitelist if you want to perform analysis based on run-time introspection of living objects. Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.
        c-extension-no-member,
        # (E0633): Attempting to unpack a non-sequence%s Used when something which is not a sequence is used in an unpack assignment
        unpacking-non-sequence,
        # (E0604): Invalid object %r in __all__, must contain only strings Used when an invalid (non-string) object occurs in __all__.
        invalid-all-object,
        # (E0611): No name %r in module %r Used when a name cannot be found in a module.
        no-name-in-module,
        # (E0602): Undefined variable %r Used when an undefined variable is accessed.
        undefined-variable,
        # (E0603): Undefined variable name %r in __all__ Used when an undefined variable name is referenced in __all__.
        undefined-all-variable,
        # (E0601): Using variable %r before assignment Used when a local variable is accessed before its assignment.
        used-before-assignment,
        # (W0640): Cell variable %s defined in loop A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.
        cell-var-from-loop,
        # (W0601): Global variable %r undefined at the module level Used when a variable is defined through the "global" statement but the variable is not defined in the module scope.
        global-variable-undefined,
        # (W0642): Invalid assignment to %s in method Invalid assignment to self or cls in instance or class method respectively.
        self-cls-assignment,
        # (W0632): Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s) Used when there is an unbalanced tuple unpacking in assignment
        unbalanced-tuple-unpacking,
        # (W0641): Possibly unused variable %r Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variable
        possibly-unused-variable,
        # (W0622): Redefining built-in %r Used when a variable or function override a built-in.
        redefined-builtin,
        # (W0623): Redefining name %r from %s in exception handler Used when an exception handler assigns the exception to an existing name
        redefine-in-handler,
        # (W0621): Redefining name %r from outer scope (line %s) Used when a variable's name hides a name defined in the outer scope.
        redefined-outer-name,
        # (W0611): Unused %s Used when an imported module or variable is not used.
        unused-import,
        # (W0613): Unused argument %r Used when a function or method argument is not used.
        unused-argument,
        # (W0614): Unused import %s from wildcard import Used when an imported module or variable is not used from a 'from X import *' style import.
        unused-wildcard-import,
        # (W0612): Unused variable %r Used when a variable is defined but not used.
        unused-variable,
        # (W0602): Using global for %r but no assignment is done Used when a variable is defined through the "global" statement but no assignment to this variable is done.
        global-variable-not-assigned,
        # (W0631): Using possibly undefined loop variable %r Used when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.
        undefined-loop-variable,
        # (W0603): Using the global statement Used when you use the "global" statement to update a global variable. Pylint just try to discourage this usage. That doesn't mean you cannot use it !
        global-statement,
        # (W0604): Using the global statement at the module level Used when you use the "global" statement at the module level since it has no effect
        global-at-module-level



# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=

# Specify a score threshold to be exceeded before program exits with error.
fail-under=10

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=CVS

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=1

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins=


# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable=print-statement,
        parameter-unpacking,
        unpacking-in-except,
        old-raise-syntax,
        backtick,
        long-suffix,
        old-ne-operator,
        old-octal-literal,
        import-star-module-level,
        non-ascii-bytes-literal,
        raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead,
        apply-builtin,
        basestring-builtin,
        buffer-builtin,
        cmp-builtin,
        coerce-builtin,
        execfile-builtin,
        file-builtin,
        long-builtin,
        raw_input-builtin,
        reduce-builtin,
        standarderror-builtin,
        unicode-builtin,
        xrange-builtin,
        coerce-method,
        delslice-method,
        getslice-method,
        setslice-method,
        no-absolute-import,
        old-division,
        dict-iter-method,
        dict-view-method,
        next-method-called,
        metaclass-assignment,
        indexing-exception,
        raising-string,
        reload-builtin,
        oct-method,
        hex-method,
        nonzero-method,
        cmp-method,
        input-builtin,
        round-builtin,
        intern-builtin,
        unichr-builtin,
        map-builtin-not-iterating,
        zip-builtin-not-iterating,
        range-builtin-not-iterating,
        filter-builtin-not-iterating,
        using-cmp-argument,
        eq-without-hash,
        div-method,
        idiv-method,
        rdiv-method,
        exception-message-attribute,
        invalid-str-codec,
        sys-max-int,
        bad-python3-import,
        deprecated-string-function,
        deprecated-str-translate-call,
        deprecated-itertools-function,
        deprecated-types-field,
        next-method-defined,
        dict-items-not-iterating,
        dict-keys-not-iterating,
        dict-values-not-iterating,
        deprecated-operator-function,
        deprecated-urllib-function,
        xreadlines-attribute,
        deprecated-sys-function,
        exception-escape,
        comprehension-escape

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable=c-extension-no-member


[REPORTS]

# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'error', 'warning', 'refactor', and 'convention'
# which contain the number of messages in each category, as well as 'statement'
# which is the total number of statements analyzed. This score is used by the
# global evaluation report (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
#msg-template=

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

# Activate the evaluation score.
score=yes


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions=sys.exit


[LOGGING]

# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style=old

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules=logging


[SPELLING]

# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the python-enchant package.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains the private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words=no


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      XXX,
      TODO

# Regular expression of note tags to take in consideration.
#notes-rgx=


[TYPECHECK]

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis). It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1

# List of decorators that change the signature of a decorated function.
signature-mutators=


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,
          _cb

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Maximum number of characters on a single line. 
# 88 -- the default for black
# 79 -- pep8 standard
max-line-length=88

# Maximum number of lines in a module.
max-module-lines=1000

# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check=trailing-comma,
               dict-separator

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no



[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Regular expression matching correct argument names. Overrides argument-
# naming-style.
#argument-rgx=

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Regular expression matching correct attribute names. Overrides attr-naming-
# style.
#attr-rgx=

# Bad variable names which should always be refused, separated by a comma.
bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata,
          urmom,
          mom

# Bad variable names regexes, separated by a comma. If names match any regex,
# they will always be refused
bad-names-rgxs=

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style.
#class-attribute-rgx=

# Naming style matching correct class names.
class-naming-style=PascalCase

# Regular expression matching correct class names. Overrides class-naming-
# style.
#class-rgx=

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Regular expression matching correct constant names. Overrides const-naming-
# style.
#const-rgx=

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=10

# Naming style matching correct function names.
function-naming-style=snake_case

# Regular expression matching correct function names. Overrides function-
# naming-style.
#function-rgx=

# Good variable names which should always be accepted, separated by a comma.
good-names=i,
           j,
           k,
           Run,
           _,
           # exceptions
           e,
           ex,
           # database
           db

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
good-names-rgxs=

# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

# Naming style matching correct inline iteration names.
inlinevar-naming-style=any

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style.
#inlinevar-rgx=

# Naming style matching correct method names.
method-naming-style=snake_case

# Regular expression matching correct method names. Overrides method-naming-
# style.
#method-rgx=

# Naming style matching correct module names.
module-naming-style=snake_case

# Regular expression matching correct module names. Overrides module-naming-
# style.
#module-rgx=

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes=abc.abstractproperty

# Naming style matching correct variable names.
variable-naming-style=snake_case

# Regular expression matching correct variable names. Overrides variable-
# naming-style. EDIT: "snake_case" typically requires variable names to be of length
# at least 3. This allows variable names of length 2.
variable-rgx=[a-z_][a-z0-9_]{1,30}$


[STRING]

# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency=yes

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps=no


[IMPORTS]

# List of modules that can be imported at any level, not just the top level
# one.
allow-any-import-level=

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules=optparse,tkinter.tix

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled).
ext-import-graph=

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled).
import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled).
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Couples of modules and preferred modules, separated by a comma.
preferred-modules=


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,
                      __new__,
                      setUp,
                      __post_init__

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=cls


[DESIGN]

# Maximum number of arguments for function / method.
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=5

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body.
max-returns=6

# Maximum number of statements in function / method body.
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "BaseException, Exception".
overgeneral-exceptions=BaseException,
                       Exception

